using System.Text;
using System.Text.Json;

namespace gitViwe.Shared;

/// <summary>
/// Defines the schema for the custom ProblemDetails class
/// </summary>
public interface IDefaultProblemDetails
{
    /// <summary>
    /// A unique identifier to represent this request in trace logs.
    /// </summary>
    string? TraceId { get; init; }

    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type.
    /// </summary>
    string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type.It SHOULD NOT change.
    /// </summary>
    string? Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for
    /// this occurrence of the problem.
    /// </summary>
    int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem.
    /// </summary>
    string? Instance { get; set; }

    /// <summary>
    /// Gets the System.Collections.Generic.IDictionary`2 for extension members.
    /// </summary>
    IDictionary<string, object?> Extensions { get; }

    /// <summary>
    /// Format the <seealso cref="Extensions"/> dictionary into a readable string
    /// </summary>
    /// <returns>A string of the <seealso cref="Extensions"/> values</returns>
    public string? ExtensionsToDebugString()
    {
        return Extensions is null
        ? string.Empty
            : '{' + string.Join(',', Extensions.Select(kv => kv.Key + '=' + JsonSerializer.Serialize(kv.Value, new JsonSerializerOptions { WriteIndented = true }) + '}'));
    }

    /// <summary>
    /// A string that represents the current <seealso cref="IDefaultProblemDetails"/>.
    /// </summary>
    /// <returns>A string that represents the <seealso cref="IDefaultProblemDetails"/>.</returns>
    public string? ToString() =>
        new StringBuilder()
            .AppendLine($"TraceId   : {TraceId}")
            .AppendLine($"Type      : {Type}")
            .AppendLine($"Title     : {Title}")
            .AppendLine($"Status    : {Status}")
            .AppendLine($"Detail    : {Detail}")
            .AppendLine($"Instance  : {Instance}")
            .AppendLine($"Extensions: {ExtensionsToDebugString()}")
            .ToString();
}
