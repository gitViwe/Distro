namespace gitViwe.Shared.ProblemDetail.Base;

/// <summary>
/// The base implementation for creating a custom <see cref="DefaultProblemDetails"/> class
/// </summary>
public class DefaultProblemDetails : IDefaultProblemDetails
{
    /// <summary>
    /// Creates a custom <see cref="DefaultProblemDetails"/> class
    /// </summary>
    public DefaultProblemDetails() { }

    /// <summary>
    /// Creates a custom <see cref="DefaultProblemDetails"/> class
    /// </summary>
    /// <param name="traceIdentifier">The unique identifier to represent this request in trace logs</param>
    /// <param name="problemDetails">The default <see cref="DefaultProblemDetails"/></param>
    public DefaultProblemDetails(string? traceIdentifier, DefaultProblemDetails problemDetails)
    {
        SetProblemDefaults(problemDetails);
        TraceId = traceIdentifier;
    }

    /// <summary>
    /// Creates a custom <see cref="DefaultProblemDetails"/> class
    /// </summary>
    /// <param name="traceIdentifier">The unique identifier to represent this request in trace logs</param>
    /// <param name="problemDetails">The default <see cref="DefaultProblemDetails"/></param>
    /// <param name="extensions">Problem type definitions MAY extend the problem details object with additional members.</param>
    public DefaultProblemDetails(string? traceIdentifier, DefaultProblemDetails problemDetails, IDictionary<string, object?> extensions)
        : this(traceIdentifier, problemDetails)
    {
        AddExtensions(extensions);
    }

    /// <summary>
    /// A unique identifier to represent this request in trace logs
    /// </summary>
    [JsonPropertyName("traceId")]
    public string? TraceId { get; init; }

    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type.
    /// </summary>
    [JsonPropertyName("type")]
    public string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type.It SHOULD NOT change.
    /// </summary>
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for
    /// this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("status")]
    public int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("detail")]
    public string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem.
    /// </summary>
    [JsonPropertyName("instance")]
    public string? Instance { get; set; }

    /// <summary>
    /// Gets the System.Collections.Generic.IDictionary`2 for extension members.
    /// </summary>
    [JsonPropertyName("extensions")]
    public IDictionary<string, object?> Extensions { get; set; } = new Dictionary<string, object?>();

    private void SetProblemDefaults(DefaultProblemDetails problem)
    {
        Status = problem.Status;
        Title = problem.Title;
        Type = problem.Type;

        if (!string.IsNullOrWhiteSpace(problem.Detail))
        {
            Detail = problem.Detail;
        }

        if (!string.IsNullOrWhiteSpace(problem.Instance))
        {
            Instance = problem.Instance;
        }
    }

    private void AddExtensions(IDictionary<string, object?> extensions)
    {
        foreach (var item in extensions)
        {
            Extensions.Add(item);
        }
    }
}
